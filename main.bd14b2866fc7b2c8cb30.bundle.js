(()=>{"use strict";var t,e={493:(t,e,s)=>{s(260);class i extends Phaser.Scene{constructor(){super({key:"BootScene"})}preload(){this.cameras.main.setBackgroundColor(0),this.createLoadingGraphics(),this.load.on("progress",(t=>{this.progressBar.clear(),this.progressBar.fillStyle(8971347,1),this.progressBar.fillRect(this.cameras.main.width/4,this.cameras.main.height/2-16,this.cameras.main.width/2*t,16)}),this),this.load.on("complete",(()=>{this.progressBar.destroy(),this.loadingBar.destroy()}),this),this.load.pack("preload","./assets/pack.json","preload")}update(){this.scene.start("MenuScene")}createLoadingGraphics(){this.loadingBar=this.add.graphics(),this.loadingBar.fillStyle(16777215,1),this.loadingBar.fillRect(this.cameras.main.width/4-2,this.cameras.main.height/2-18,this.cameras.main.width/2+4,20),this.progressBar=this.add.graphics()}}class h extends Phaser.GameObjects.Image{constructor(t){super(t.scene,t.x,t.y,t.texture),this.rotation=t.rotation,this.initImage(),this.scene.add.existing(this)}initImage(){this.bulletSpeed=1e3,this.setOrigin(.5,.5),this.setDepth(2),this.scene.physics.world.enable(this),this.scene.physics.velocityFromRotation(this.rotation-Math.PI/2,this.bulletSpeed,this.body.velocity)}update(){}}class a extends Phaser.GameObjects.Image{getBullets(){return this.bullets}constructor(t){super(t.scene,t.x,t.y,t.texture,t.frame),this.initImage(),this.scene.add.existing(this)}initImage(){this.health=1,this.lastShoot=0,this.speed=100,this.setOrigin(.5,.5),this.setDepth(0),this.angle=180,this.barrel=this.scene.add.image(this.x,this.y,"barrelBlue"),this.barrel.setOrigin(.5,1),this.barrel.setDepth(1),this.barrel.angle=180,this.lifeBar=this.scene.add.graphics(),this.redrawLifebar(),this.bullets=this.scene.add.group({active:!0,maxSize:10,runChildUpdate:!0}),this.cursors=this.scene.input.keyboard.createCursorKeys(),this.rotateKeyLeft=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A),this.rotateKeyRight=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D),this.shootingKey=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE),this.scene.physics.world.enable(this)}update(){this.active?(this.barrel.x=this.x,this.barrel.y=this.y,this.lifeBar.x=this.x,this.lifeBar.y=this.y,this.handleInput(),this.handleShooting()):(this.destroy(),this.barrel.destroy(),this.lifeBar.destroy())}handleInput(){this.cursors.up.isDown?this.scene.physics.velocityFromRotation(this.rotation-Math.PI/2,this.speed,this.body.velocity):this.cursors.down.isDown?this.scene.physics.velocityFromRotation(this.rotation-Math.PI/2,-this.speed,this.body.velocity):this.body.setVelocity(0,0),this.cursors.left.isDown?this.rotation-=.02:this.cursors.right.isDown&&(this.rotation+=.02),this.rotateKeyLeft.isDown?this.barrel.rotation-=.05:this.rotateKeyRight.isDown&&(this.barrel.rotation+=.05)}handleShooting(){this.shootingKey.isDown&&this.scene.time.now>this.lastShoot&&(this.scene.cameras.main.shake(20,.005),this.scene.tweens.add({targets:this,props:{alpha:.8},delay:0,duration:5,ease:"Power1",easeParams:null,hold:0,repeat:0,repeatDelay:0,yoyo:!0,paused:!1}),this.bullets.getLength()<10&&(this.bullets.add(new h({scene:this.scene,rotation:this.barrel.rotation,x:this.barrel.x,y:this.barrel.y,texture:"bulletBlue"})),this.lastShoot=this.scene.time.now+80))}redrawLifebar(){this.lifeBar.clear(),this.lifeBar.fillStyle(15100456,1),this.lifeBar.fillRect(-this.width/2,this.height/2,this.width*this.health,15),this.lifeBar.lineStyle(2,16777215),this.lifeBar.strokeRect(-this.width/2,this.height/2,this.width,15),this.lifeBar.setDepth(1)}updateHealth(){this.health>0?(this.health-=.05,this.redrawLifebar()):(this.health=0,this.active=!1,this.scene.scene.start("MenuScene"))}}class r extends Phaser.GameObjects.Image{getBarrel(){return this.barrel}getBullets(){return this.bullets}constructor(t){super(t.scene,t.x,t.y,t.texture,t.frame),this.initContainer(),this.scene.add.existing(this)}initContainer(){this.health=1,this.lastShoot=0,this.speed=100,this.setDepth(0),this.barrel=this.scene.add.image(0,0,"barrelRed"),this.barrel.setOrigin(.5,1),this.barrel.setDepth(1),this.lifeBar=this.scene.add.graphics(),this.redrawLifebar(),this.bullets=this.scene.add.group({active:!0,maxSize:10,runChildUpdate:!0}),this.scene.tweens.add({targets:this,props:{y:this.y-200},delay:0,duration:2e3,ease:"Linear",easeParams:null,hold:0,repeat:-1,repeatDelay:0,yoyo:!0}),this.scene.physics.world.enable(this)}update(){this.active?(this.barrel.x=this.x,this.barrel.y=this.y,this.lifeBar.x=this.x,this.lifeBar.y=this.y,this.handleShooting()):(this.destroy(),this.barrel.destroy(),this.lifeBar.destroy())}handleShooting(){this.scene.time.now>this.lastShoot&&this.bullets.getLength()<10&&(this.bullets.add(new h({scene:this.scene,rotation:this.barrel.rotation,x:this.barrel.x,y:this.barrel.y,texture:"bulletRed"})),this.lastShoot=this.scene.time.now+400)}redrawLifebar(){this.lifeBar.clear(),this.lifeBar.fillStyle(15100456,1),this.lifeBar.fillRect(-this.width/2,this.height/2,this.width*this.health,15),this.lifeBar.lineStyle(2,16777215),this.lifeBar.strokeRect(-this.width/2,this.height/2,this.width,15),this.lifeBar.setDepth(1)}updateHealth(){this.health>0?(this.health-=.05,this.redrawLifebar()):(this.health=0,this.active=!1)}}class l extends Phaser.GameObjects.Image{constructor(t){super(t.scene,t.x,t.y,t.texture),this.initImage(),this.scene.add.existing(this)}initImage(){this.setOrigin(0,0),this.scene.physics.world.enable(this),this.body.setImmovable(!0)}update(){}}class o extends Phaser.Scene{constructor(){super({key:"GameScene"})}init(){}create(){this.map=this.make.tilemap({key:"levelMap"}),this.tileset=this.map.addTilesetImage("tiles"),this.layer=this.map.createLayer("tileLayer",this.tileset,0,0),this.layer.setCollisionByProperty({collide:!0}),this.obstacles=this.add.group({runChildUpdate:!0}),this.enemies=this.add.group({}),this.convertObjects(),this.physics.add.collider(this.player,this.layer),this.physics.add.collider(this.player,this.obstacles),this.physics.add.collider(this.player.getBullets(),this.layer,(t=>this.bulletHitLayer(t)),void 0,this),this.physics.add.collider(this.player.getBullets(),this.obstacles,((t,e)=>this.bulletHitObstacles(t,e)),void 0,this),this.enemies.children.each((t=>{this.physics.add.overlap(this.player.getBullets(),t,((t,e)=>this.playerBulletHitEnemy(t,e)),void 0,this),this.physics.add.overlap(t.getBullets(),this.player,((t,e)=>this.enemyBulletHitPlayer(t,e)),void 0),this.physics.add.collider(t.getBullets(),this.obstacles,((t,e)=>this.bulletHitObstacles(t,e)),void 0),this.physics.add.collider(t.getBullets(),this.layer,(t=>this.bulletHitLayer(t)),void 0)}),this),this.cameras.main.startFollow(this.player)}update(){this.player.update(),this.enemies.children.each((t=>{if(t.update(),this.player.active&&t.active){const e=Phaser.Math.Angle.Between(t.body.x,t.body.y,this.player.body.x,this.player.body.y);t.getBarrel().angle=(e+Math.PI/2)*Phaser.Math.RAD_TO_DEG}}),this)}convertObjects(){this.map.getObjectLayer("objects").objects.forEach((t=>{if("player"===t.type)this.player=new a({scene:this,x:t.x,y:t.y,texture:"tankBlue"});else if("enemy"===t.type){const e=new r({scene:this,x:t.x,y:t.y,texture:"tankRed"});this.enemies.add(e)}else{const e=new l({scene:this,x:t.x,y:t.y-40,texture:t.type});this.obstacles.add(e)}}))}bulletHitLayer(t){t.destroy()}bulletHitObstacles(t,e){t.destroy()}enemyBulletHitPlayer(t,e){t.destroy(),e.updateHealth()}playerBulletHitEnemy(t,e){t.destroy(),e.updateHealth()}}class n extends Phaser.Scene{constructor(){super({key:"MenuScene"}),this.bitmapTexts=[]}init(){this.startKey=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S),this.startKey.isDown=!1}create(){this.bitmapTexts.push(this.add.bitmapText(this.sys.canvas.width/2-120,this.sys.canvas.height/2,"font","PRESS S TO PLAY",30)),this.bitmapTexts.push(this.add.bitmapText(this.sys.canvas.width/2-120,this.sys.canvas.height/2-100,"font","TANK",100))}update(){this.startKey.isDown&&this.scene.start("GameScene")}}const d={title:"Tank",url:"https://github.com/digitsensitive/phaser3-typescript",version:"2.0",width:1600,height:1200,zoom:.6,type:Phaser.AUTO,parent:"game",scene:[i,n,o],input:{keyboard:!0},physics:{default:"arcade",arcade:{gravity:{y:0},debug:!1}},backgroundColor:"#000000",render:{pixelArt:!1,antialias:!0}};class c extends Phaser.Game{constructor(t){super(t)}}window.addEventListener("load",(()=>{new c(d)}))}},s={};function i(t){var h=s[t];if(void 0!==h)return h.exports;var a=s[t]={exports:{}};return e[t].call(a.exports,a,a.exports,i),a.exports}i.m=e,t=[],i.O=(e,s,h,a)=>{if(!s){var r=1/0;for(d=0;d<t.length;d++){for(var[s,h,a]=t[d],l=!0,o=0;o<s.length;o++)(!1&a||r>=a)&&Object.keys(i.O).every((t=>i.O[t](s[o])))?s.splice(o--,1):(l=!1,a<r&&(r=a));if(l){t.splice(d--,1);var n=h();void 0!==n&&(e=n)}}return e}a=a||0;for(var d=t.length;d>0&&t[d-1][2]>a;d--)t[d]=t[d-1];t[d]=[s,h,a]},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={179:0};i.O.j=e=>0===t[e];var e=(e,s)=>{var h,a,[r,l,o]=s,n=0;if(r.some((e=>0!==t[e]))){for(h in l)i.o(l,h)&&(i.m[h]=l[h]);if(o)var d=o(i)}for(e&&e(s);n<r.length;n++)a=r[n],i.o(t,a)&&t[a]&&t[a][0](),t[a]=0;return i.O(d)},s=self.webpackChunktype_project_template=self.webpackChunktype_project_template||[];s.forEach(e.bind(null,0)),s.push=e.bind(null,s.push.bind(s))})();var h=i.O(void 0,[216],(()=>i(493)));h=i.O(h)})();